@page "/Landdle"
@using global::Landdle.Models
@using global::Landdle.Services
@inject IGuessService GuessService

<h3>Landdle</h3>

<label for="country">Guesses left: @guessesLeft</label>
<input name="country" list="country_datalist" @bind="selectedValue" style="width:280px" placeholder="Type a Land..." autocomplete="off">

<datalist id="country_datalist">
    @foreach (var country in countries)
    {
        <option value="@country.Name">@country.Name</option>
    }
</datalist>

<button class="btn btn-@(hasWon ? "success" : (guessesLeft > 0 ? "primary" : "danger"))" @onclick="SendGuess">@(hasWon ? "Correct!" : (guessesLeft > 0 ? "Guess!" : "Game Over!"))</button>
<label style="color:red">@errorMsg</label>

<table class="table">
    <thead>
        <tr>
            <th>Land</th>
            <th>Population</th>
            <th>Size (km<sup>2</sup>)</th>
            <th>Continent</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var guess in countryInformation)
        {
            <tr style="@(guess.Country == answer.Country ? "color:green; font-weight:bold" : "")">
                <td>@guess.Country</td>
                <td>@guess.Population.ToString("N0") @(ApplyHintToNumbers(guess.Population, "Population"))</td>
                <td>@guess.LandKM2.ToString("N0") @(ApplyHintToNumbers(guess.LandKM2, "LandKM2"))</td>
                <td style="color:@(ApplyContinentHint(guess.Continent))">@guess.Continent</td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<Country> countries = new List<Country>();
    CountryInformation answer;

    protected override async Task OnInitializedAsync()
    {
        countries = await GuessService.GetListOfAllCountryNames();
        answer = await GuessService.GetCountryInformation(-1);
    }

    private string? selectedValue;
    private bool hasWon = false;
    private int guessesLeft = 10;

    private string? errorMsg;

    List<CountryInformation> countryInformation = new List<CountryInformation>();

    public async void SendGuess()
    {
        errorMsg = "";

        if (!hasWon && guessesLeft > 0)
        {
            if (selectedValue != null)
            {
                var chosenCountry = countries.Find(x => x.Name == selectedValue);
                if (chosenCountry != null)
                {
                    if (!countryInformation.Any(x => x.Country == chosenCountry.Name))
                    {
                        var guess = await GuessService.GetCountryInformation(chosenCountry.Id);
                        countryInformation.Add(guess);

                        guessesLeft--;

                        if (guess.Country == answer.Country)
                        {
                            hasWon = true;
                        }
                        else if (guessesLeft == 0)
                        {
                            countryInformation.Add(answer);
                        }
                    }
                    else
                    {
                        errorMsg = "You have already guessed " + chosenCountry.Name + "!";
                    }
                }
            }
        }
        selectedValue = string.Empty;

        await InvokeAsync(() => StateHasChanged());
    }

    public string ApplyContinentHint(string continent)
    {
        string hint = "red";

        if (continent == answer.Continent)
        {
            hint = "green";
        }
        else if (answer.Continent.Contains(continent) || continent.Contains(answer.Continent))
        {
            hint = "orange";
        }
        else if (answer.Continent.Contains("/") || continent.Contains("/"))
        {
            foreach (var a_partial in answer.Continent.Split("/"))
            {
                foreach (var g_partial in continent.Split("/"))
                {
                    if (a_partial == g_partial)
                    {
                        hint = "orange";
                        break;
                    }
                }
            }
        }

        return hint;
    }

    public string ApplyHintToNumbers(int guessValue, string propertyName)
    {
        string hint = "";

        var answerValue = (int)answer.GetType().GetProperty(propertyName).GetValue(answer);

        if (guessValue > answerValue)
        {
            hint = "(down)";
        }
        else if (guessValue < answerValue)
        {
            hint = "(up)";
        }

        return hint;
    }
}
